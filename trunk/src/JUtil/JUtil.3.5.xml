<?xml version="1.0"?>
<doc>
    <assembly>
        <name>JUtil</name>
    </assembly>
    <members>
        <member name="M:JUtil.Path.File.Exists(System.String)">
            <summary>
            determine a specified file whether exist
            </summary>
        </member>
        <member name="M:JUtil.Path.File.GetAbsolutePath(System.String,System.String)">
            <summary>
            get absolute path
            </summary>
        </member>
        <member name="M:JUtil.Path.File.Explore(System.String)">
            <summary>
            View a file
            </summary>
        </member>
        <member name="T:JUtil.DatabaseMode">
            <summary>
            支援可連線的資料庫類型
            </summary>
        </member>
        <member name="T:JUtil.Database">
            <remarks>
            lazy initialize DbConnection when using it at first time called by SelectSQL or ExecuteSQL,
            and close DbConnection in Finalize() or Dispose()
            </remarks>
        </member>
        <member name="M:JUtil.Database.#ctor(JUtil.DatabaseMode,System.String)">
            <summary>
            ctor
            </summary>
            <param name="databaseMode">supported DatabaseMode</param>
            <param name="connectionString">the connection string for DataBase</param>
        </member>
        <member name="M:JUtil.Database.Finalize">
            <summary>
            dtor
            </summary>
        </member>
        <member name="M:JUtil.Database.ConnectionCount">
            <summary>
            retrieve the count of total connections in database
            </summary>
            <remarks>
            so far, only sql server can be supported 
            </remarks>
        </member>
        <member name="M:JUtil.Extensions.ExtXmlDocument.SaveAs(System.Xml.XmlDocument,System.String,System.String)">
            <summary>
             根據編碼方式儲存XmlDocument
            </summary>
        </member>
        <member name="T:JUtil.Extensions.ExtDataTable">
            <summary>Enhance control functionality</summary>
        </member>
        <member name="M:JUtil.Extensions.ExtDataTable.MatchPolicy(System.Data.DataTable,JUtil.Extensions.CallBackPolicyMaker)">
            <summary>
            判斷所擷取的資料是否符合特定條件(PolicyMaker)
            </summary>
        </member>
        <member name="M:JUtil.Extensions.ExtDataTable.Display(System.Data.DataTable)">
            <summary>just for debug, display the content of datatable</summary>
        </member>
        <member name="M:JUtil.Extensions.ExtDataTable.GetFieldNames(System.Data.DataTable)">
            <summary>get all fields's name of datatable</summary>
        </member>
        <member name="M:JUtil.Extensions.ExtDataTable.Count(System.Data.DataTable)">
            <summary>get record count of datatable</summary>
        </member>
        <member name="M:JUtil.Extensions.ExtDataTable.FieldCount(System.Data.DataTable)">
            <summary>get field count of datatable</summary>
        </member>
        <member name="M:JUtil.Extensions.ExtDataTable.GetValue(System.Data.DataTable,System.Int32,System.String)">
            <summary>get field's value of n-th data in datatable by field's name</summary>
        </member>
        <member name="M:JUtil.Extensions.ExtDataTable.GetValue(System.Data.DataTable,System.Int32,System.Int32)">
            <summary>get field's value of n-th data in datatable by field's index in the order</summary>
        </member>
        <member name="M:JUtil.Extensions.ExtDataTable.SetValue(System.Data.DataTable,System.Int32,System.String,System.Object)">
            <summary>set field's value of n-th data in datatable by field's name</summary>
        </member>
        <member name="M:JUtil.Extensions.ExtDataTable.SetValue(System.Data.DataTable,System.Int32,System.Int32,System.Object)">
            <summary>set field's value of n-th data in datatable by field's index in the order</summary>
        </member>
        <member name="M:JUtil.Extensions.ExtDataTable.FieldType(System.Data.DataTable,System.Int32)">
            <summary>get field's type from datatable by field's index in the order</summary>
        </member>
        <member name="M:JUtil.Extensions.ExtDataTable.FieldType(System.Data.DataTable,System.String)">
            <summary>get field's type from datatable by field's name</summary>
        </member>
        <member name="M:JUtil.Extensions.ExtType.GetType(System.String)">
            <summary>
            another way to get type from typeName
            </summary>
        </member>
        <member name="T:JUtil.XDatabase">
            <remarks>
            lazy initialize DbConnection when using it at first time called by SelectSQL or ExecuteSQL,
            and close DbConnection in Finalize() or Dispose()
            </remarks>
        </member>
        <member name="M:JUtil.XDatabase.#ctor(JUtil.DatabaseMode,System.String)">
            <summary>
            ctor
            </summary>
            <param name="databaseMode">supported DatabaseMode</param>
            <param name="connectionString">the connection string for DataBase</param>
        </member>
        <member name="M:JUtil.XDatabase.ConnectionCount">
            <summary>
            retrieve the count of total connections in database
            </summary>
            <remarks>
            so far, only sql server can be supported 
            </remarks>
        </member>
        <member name="T:JUtil.Reflection.Reflect">
            <summary>
            Helper methods for inspecting a type by reflection. 
            
            Many of these methods take ICustomAttributeProvider as an 
            argument to avoid duplication, even though certain attributes can 
            only appear on specific types of members, like MethodInfo or Type.
            
            In the case where a type is being examined for the presence of
            an attribute, interface or named member, the Reflect methods
            operate with the full name of the member being sought. This
            removes the necessity of the caller having a reference to the
            assembly that defines the item being sought and allows the
            NUnit core to inspect assemblies that reference an older
            version of the NUnit framework.
            </summary>
        </member>
        <member name="M:JUtil.Reflection.Reflect.HasAttribute(System.Reflection.ICustomAttributeProvider,System.String,System.Boolean)">
            <summary>
            Check presence of attribute of a given type on a member.
            </summary>
            <param name="member">The member to examine</param>
            <param name="attrName">The FullName of the attribute type to look for</param>
            <param name="inherit">True to include inherited attributes</param>
            <returns>True if the attribute is present</returns>
        </member>
        <member name="M:JUtil.Reflection.Reflect.GetAttribute(System.Reflection.ICustomAttributeProvider,System.String,System.Boolean)">
            <summary>
            Get attribute of a given type on a member. If multiple attributes
            of a type are present, the first one found is returned.
            </summary>
            <param name="member">The member to examine</param>
            <param name="attrName">The FullName of the attribute type to look for</param>
            <param name="inherit">True to include inherited attributes</param>
            <returns>The attribute or null</returns>
        </member>
        <member name="M:JUtil.Reflection.Reflect.GetAttributes(System.Reflection.ICustomAttributeProvider,System.String,System.Boolean)">
            <summary>
            Get all attributes of a given type on a member.
            </summary>
            <param name="member">The member to examine</param>
            <param name="attrName">The FullName of the attribute type to look for</param>
            <param name="inherit">True to include inherited attributes</param>
            <returns>The attribute or null</returns>
        </member>
        <member name="M:JUtil.Reflection.Reflect.GetAttributes(System.Reflection.ICustomAttributeProvider,System.Boolean)">
            <summary>
            Get all attributes on a member.
            </summary>
            <param name="member">The member to examine</param>
            <param name="inherit">True to include inherited attributes</param>
            <returns>The attribute or null</returns>
        </member>
        <member name="M:JUtil.Reflection.Reflect.HasInterface(System.Type,System.String)">
            <summary>
            Check to see if a type implements a named interface.
            </summary>
            <param name="fixtureType">The type to examine</param>
            <param name="interfaceName">The FullName of the interface to check for</param>
            <returns>True if the interface is implemented by the type</returns>
        </member>
        <member name="M:JUtil.Reflection.Reflect.InheritsFrom(System.Type,System.String)">
            <summary>
            Checks to see if a type inherits from a named type. 
            </summary>
            <param name="type">The type to examine</param>
            <param name="typeName">The FullName of the inherited type to look for</param>
            <returns>True if the type inherits from the named type.</returns>
            <remarks></remarks>
        </member>
        <member name="M:JUtil.Reflection.Reflect.GetConstructor(System.Type)">
            <summary>
            Find the default constructor on a type
            </summary>
            <param name="fixtureType"></param>
            <returns></returns>
        </member>
        <member name="M:JUtil.Reflection.Reflect.GetMethodsWithAttribute(System.Type,System.String,System.Boolean)">
            <summary>
            Examine a fixture type and return an array of methods having a 
            particular attribute. The array is order with base methods first.
            </summary>
            <param name="fixtureType">The type to examine</param>
            <param name="attributeName">The FullName of the attribute to look for</param>
            <returns>The array of methods found</returns>
        </member>
        <member name="M:JUtil.Reflection.Reflect.HasMethodWithAttribute(System.Type,System.String,System.Boolean)">
            <summary>
            Examine a fixture type and return true if it has a method with
            a particular attribute. 
            </summary>
            <param name="fixtureType">The type to examine</param>
            <param name="attributeName">The FullName of the attribute to look for</param>
            <returns>True if found, otherwise false</returns>
        </member>
        <member name="M:JUtil.Reflection.Reflect.GetNamedMethod(System.Type,System.String)">
            <summary>
            Examine a fixture type and get a method with a particular name.
            In the case of overloads, the first one found is returned.
            </summary>
            <param name="fixtureType">The type to examine</param>
            <param name="methodName">The name of the method</param>
            <returns>A MethodInfo or null</returns>
        </member>
        <member name="M:JUtil.Reflection.Reflect.GetNamedMethod(System.Type,System.String,System.String[])">
            <summary>
            Examine a fixture type and get a method with a particular name and list
            of arguments. In the case of overloads, the first one found is returned.
            </summary>
            <param name="fixtureType">The type to examine</param>
            <param name="methodName">The name of the method</param>
            <param name="argTypes">The full names of the argument types to search for</param>
            <returns>A MethodInfo or null</returns>
        </member>
        <member name="M:JUtil.Reflection.Reflect.GetPropertyWithAttribute(System.Type,System.String)">
            <summary>
            Examine a type and return a property having a particular attribute.
            In the case of multiple methods, the first one found is returned.
            </summary>
            <param name="fixtureType">The type to examine</param>
            <param name="attributeName">The FullName of the attribute to look for</param>
            <returns>A PropertyInfo or null</returns>
        </member>
        <member name="M:JUtil.Reflection.Reflect.GetNamedProperty(System.Type,System.String,System.Reflection.BindingFlags)">
            <summary>
            Examine a type and get a property with a particular name.
            In the case of overloads, the first one found is returned.
            </summary>
            <param name="type">The type to examine</param>
            <param name="bindingFlags">BindingFlags to use</param>
            <returns>A PropertyInfo or null</returns>
        </member>
        <member name="M:JUtil.Reflection.Reflect.GetPropertyValue(System.Object,System.String)">
            <summary>
            Get the value of a named property on an object using binding flags of Public and Instance
            </summary>
            <param name="obj">The object for which the property value is needed</param>
            <param name="name">The name of a non-indexed property of the object</param>
            <returns></returns>
        </member>
        <member name="M:JUtil.Reflection.Reflect.GetPropertyValue(System.Object,System.String,System.Reflection.BindingFlags)">
            <summary>
            Get the value of a named property on an object
            </summary>
            <param name="obj">The object for which the property value is needed</param>
            <param name="name">The name of a non-indexed property of the object</param>
            <param name="bindingFlags">BindingFlags for use in determining which properties are needed</param>param>
            <returns></returns>
        </member>
        <member name="M:JUtil.Reflection.Reflect.Construct(System.Type)">
            <summary>
            Invoke the default constructor on a Type
            </summary>
            <param name="type">The Type to be constructed</param>
            <returns>An instance of the Type</returns>
        </member>
        <member name="M:JUtil.Reflection.Reflect.Construct(System.Type,System.Object[])">
            <summary>
            Invoke a constructor on a Type with arguments
            </summary>
            <param name="type">The Type to be constructed</param>
            <param name="arguments">Arguments to the constructor</param>
            <returns>An instance of the Type</returns>
        </member>
        <member name="M:JUtil.Reflection.Reflect.GetTypeArray(System.Object[])">
            <summary>
            Returns an array of types from an array of objects.
            Used because the compact framework doesn't support
            Type.GetTypeArray()
            </summary>
            <param name="objects">An array of objects</param>
            <returns>An array of Types</returns>
        </member>
        <member name="M:JUtil.Reflection.Reflect.InvokeMethod(System.Reflection.MethodInfo,System.Object)">
            <summary>
            Invoke a parameterless method returning void on an object.
            </summary>
            <param name="method">A MethodInfo for the method to be invoked</param>
            <param name="fixture">The object on which to invoke the method</param>
        </member>
        <member name="M:JUtil.Reflection.Reflect.InvokeMethod(System.Reflection.MethodInfo,System.Object,System.Object[])">
            <summary>
            Invoke a method returning void, converting any TargetInvocationException
            to an NUnitException
            </summary>
            <param name="method">A MethodInfo for the method to be invoked</param>
            <param name="fixture">The object on which to invoke the method</param>
        </member>
        <member name="M:JUtil.Reflection.Reflect.InvokeMethod(System.String,System.Object,System.Object[])">
            <summary>
            (2011.01.08 JELLY) 擴充InvokeMethod 
            </summary>
        </member>
        <member name="P:JUtil.Reflection.Reflect.CallerType">
            <summary>
            取得呼叫端的型別
            </summary>
        </member>
        <member name="M:JUtil.Net.UrlExist(System.String)">
            <summary>
            determine a url whether legal or not
            </summary>
        </member>
        <member name="M:JUtil.Net.DownloadFileAsync(System.String,System.String,System.Net.DownloadProgressChangedEventHandler,System.ComponentModel.AsyncCompletedEventHandler)">
            <summary>
            下載指定檔案
            </summary>
        </member>
        <member name="M:JUtil.Path.Directory.Exists(System.String)">
            <summary>
            determine a specified directory whether exist
            </summary>
        </member>
        <member name="M:JUtil.Path.Directory.MakeSureExists(System.String)">
            <summary>
            make sure a directory exist, if not create it automatically
            </summary>
            <remarks>
            throw exception while create directory failed
            </remarks>
        </member>
        <member name="M:JUtil.Path.Directory.Explore(System.String)">
            <summary>
            Explore a directory
            </summary>
        </member>
        <member name="P:JUtil.Path.Directory.Application">
            <summary>
            取得目前執行檔所在目錄
            </summary>
        </member>
        <member name="T:JUtil.Reflection.AssemblyAccessor">
            <summary>
            assembly版本資訊
            </summary>
        </member>
        <member name="M:JUtil.Reflection.AssemblyAccessor.#ctor(System.String)">
            <summary>
            根據assembly路徑取得assembly版本資訊
            </summary>
            <param name="assemblyName"></param>
        </member>
        <member name="M:JUtil.Log.T(System.String,System.Object[])">
            <summary>
            用於開發階段偵錯使用, 必須將使用 Log.T(...) 的專案中 DEBUG FLAG 打開才會有作用
            </summary>
            <remarks>
            必須將使用 Log.T(...) 的專案中 DEBUG FLAG 打開才會有作用
            
            [屬性] -> [建置] -> [一般] : 定義 DEBUG 常數
            </remarks>
        </member>
        <member name="T:JUtil.ResourceManagement.ResourceManager">
            <summary>
            集中管理內嵌資源
            </summary>
        </member>
        <member name="M:JUtil.ResourceManagement.ResourceManager.GetResource(System.String,System.String)">
            <summary>
            取得指定路徑的指定內嵌資源
            </summary>
            <param name="assemblyName">assembly路徑</param>
            <param name="resourceName">內嵌資源名稱</param>
        </member>
        <member name="M:JUtil.ResourceManagement.ResourceManager.GetRSLoader(System.String)">
            <summary>
            取得指定路徑的ResourcesLoader
            </summary>
            <param name="assemblyName">assembly路徑</param>
        </member>
        <member name="P:JUtil.ResourceManagement.ResourceManager.LocalResource">
            <summary>
            取得目前assembly路徑的ResourcesLoader
            </summary>
        </member>
        <member name="M:JUtil.Process.Run(System.String)">
            <summary>
            run specified program 
            </summary>
        </member>
        <member name="M:JUtil.Process.Run(System.String,System.String)">
            <summary>
            run specified program with arguments
            </summary>
        </member>
        <member name="M:JUtil.Process.WaitExists(System.String,System.String,System.TimeSpan)">
            <summary>
            Pauses execution until the requested window exists or timeout happen.
            </summary>
            <returns>
            Returns false if timeout occurred.
            </returns>
            <param name="lpClassName"></param>
            <param name="lpWindowName"></param>
            <param name="timeout">Timeout in seconds</param>
        </member>
        <member name="M:JUtil.Process.WaitClose(System.String,System.String,System.TimeSpan)">
            <summary>
            Pauses execution until the requested window does not exist or timeout happen.
            </summary>
            <returns>
            Returns false if timeout occurred.
            </returns>
            <param name="lpClassName"></param>
            <param name="lpWindowName"></param>
            <param name="timeout">Timeout in seconds</param>
        </member>
        <member name="M:JUtil.Process.WaitExists(System.String,System.String)">
            <summary>
            Pauses execution until the requested window exist.
            </summary>
        </member>
        <member name="M:JUtil.Process.WaitClose(System.String,System.String)">
            <summary>
            Pauses execution until the requested window does not exist.
            </summary>
        </member>
        <member name="M:JUtil.Process.Exists(System.String,System.String)">
            <summary>
            determine specified window exists
            </summary>
        </member>
        <member name="T:JUtil.FieldSchema">
            <remarks>
            http://msdn.microsoft.com/en-us/library/system.data.sqlclient.sqldatareader.getschematable.aspx
            </remarks>
        </member>
        <member name="T:JUtil.ResourceManagement.ResourceIdPolicy">
            <summary>
            指定解析resourceId的方式
            </summary>
        </member>
        <member name="F:JUtil.ResourceManagement.ResourceIdPolicy.FullResourceName">
            <summary>
            取得完整的ResourceName
            </summary>
        </member>
        <member name="F:JUtil.ResourceManagement.ResourceIdPolicy.FileName">
            <summary>
            只取檔名
            </summary>
        </member>
        <member name="T:JUtil.ResourceManagement.ResourcesLoader">
            <summary>
            取得指定路徑的內嵌資源
            </summary>
        </member>
        <member name="F:JUtil.ResourceManagement.ResourcesLoader.resourceIdPolicy">
            <summary>
            解析resourceId的方式目前尚未設定對外介面
            </summary>
        </member>
        <member name="M:JUtil.ResourceManagement.ResourcesLoader.#ctor(System.String)">
            <summary>
            根據指定路徑，取得內嵌資源
            </summary>
            <param name="fileName">assembly路徑</param>
        </member>
        <member name="M:JUtil.ResourceManagement.ResourcesLoader.#ctor">
            <summary>
            載入目前assembly路徑的內嵌資源
            </summary>
        </member>
        <member name="P:JUtil.ResourceManagement.ResourcesLoader.Item(System.String)">
            <summary>
            根據resourceId取得對應的內嵌資源
            </summary>
            <remarks>
            resourceId是根據ResourceIdPolicy決定解析出來的
            </remarks>
        </member>
        <member name="T:JUtil.ResourceManagement.ResourcesLoaderException">
            <summary>
            ResourcesLoader專用Exception
            </summary>
        </member>
        <member name="T:JUtil.Extensions.ExtObject">
            <summary>Enhance Object functionality</summary>
        </member>
        <member name="M:JUtil.Extensions.ExtObject.IsNumericType(System.Object)">
            <summary>determines whether the specified value is of numeric type.</summary>
        </member>
        <member name="M:JUtil.Extensions.ExtObject.ConvertTo(System.Object,System.Type)">
            <summary>implement a casting operation that support nullable object type-casting</summary>
        </member>
        <member name="M:JUtil.Extensions.ExtObject.IsPositive(System.Object,System.Boolean)">
            <summary>determines whether the specified value is positive.</summary>
        </member>
        <member name="M:JUtil.Extensions.ExtObject.ToUnsigned(System.Object)">
            <summary>converts the specified values boxed type to its correpsonding unsigned type.</summary>
        </member>
        <member name="M:JUtil.Extensions.ExtObject.ToInteger(System.Object,System.Boolean)">
            <summary>converts the specified values boxed type to its correpsonding integer type.</summary>
        </member>
        <member name="M:JUtil.SevenZipLib.ExtractArchive(System.String,System.String)">
            <summary>
            解壓縮
            </summary>
            <param name="archFileName">壓縮檔路徑</param>
            <param name="extractFolder">解壓縮到指定目錄</param>
        </member>
        <member name="M:JUtil.SevenZipLib.CompressDirectory(System.String,System.String)">
            <summary>
            壓縮
            </summary>
            <param name="compressDirectory">要壓縮的目錄路徑</param>
            <param name="archFileName">指定壓縮檔路徑</param>
        </member>
        <member name="M:JUtil.SevenZipLib.CompressDirectory(System.String,System.String,SevenZip.OutArchiveFormat,SevenZip.CompressionLevel)">
            <summary>
            壓縮
            </summary>
            <param name="compressDirectory">要壓縮的目錄路徑</param>
            <param name="archFileName">指定壓縮檔路徑</param>
            <param name="archiveFormat">壓縮格式</param>
            <param name="compressionLevel">壓縮比</param>
        </member>
        <member name="P:JUtil.SevenZipLib.LibraryPath">
            <summary>
            取得 7z.dll 檔案路徑，如果檔案不存在就從內嵌資源拷貝一份到對應路徑
            </summary>
        </member>
    </members>
</doc>
